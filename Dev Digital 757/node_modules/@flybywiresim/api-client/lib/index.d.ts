export declare class MetarResponse {
    icao: string;
    source: string;
    metar: string;
}
export declare class TafResponse {
    icao: string;
    source: string;
    taf: string;
}
export declare class AtisResponse {
    icao: string;
    source: string;
    combined?: string;
    arr?: string;
    dep?: string;
}
export declare class AirportResponse {
    icao: string;
    type: string;
    name: string;
    lat: number;
    lon: number;
    elevation: number;
    continent: string;
    country: string;
    transAlt: number;
}
export declare class TelexConnection {
    id: string;
    isActive: boolean;
    firstContact: Date;
    lastContact: Date;
    flight: string;
    location: {
        x: number;
        y: number;
    };
    trueAltitude: number;
    heading: number;
    freetextEnabled: boolean;
    aircraftType: string;
    origin: string;
    destination: string;
}
export declare class TelexMessage {
    id: string;
    createdAt: Date;
    received: boolean;
    message: string;
    isProfane: boolean;
    from: TelexConnection;
    to?: TelexConnection;
}
export declare class Token {
    accessToken: string;
    connection: string;
    flight: string;
}
export declare class AircraftStatus {
    location: {
        long: number;
        lat: number;
    };
    trueAltitude: number;
    heading: number;
    origin: string;
    destination: string;
    freetextEnabled: boolean;
    flight: string;
    aircraftType: string;
}
export declare class CommitInfo {
    sha: string;
    timestamp: Date;
}
export declare class ReleaseInfo {
    name: string;
    publishedAt: Date;
    htmlUrl: string;
}
export declare class Paginated<T> {
    results: T[];
    count: number;
    total: number;
}
export declare class Bounds {
    north: number;
    east: number;
    south: number;
    west: number;
}
export declare type StageCallback = (flights: TelexConnection[]) => void;
export declare class HttpError extends Error {
    readonly status: number;
    constructor(status: number, message?: string);
}
export declare class TelexNotConnectedError extends Error {
    constructor();
}
export declare class NXApi {
    static url: URL;
}
export declare class Metar {
    static get(icao: string, source?: string): Promise<MetarResponse>;
}
export declare class Atis {
    static get(icao: string, source?: string): Promise<AtisResponse>;
}
export declare class Taf {
    static get(icao: string, source?: string): Promise<TafResponse>;
}
export declare class Telex {
    private static accessToken;
    static refreshRate: number;
    static connect(status: AircraftStatus): Promise<Token>;
    static update(status: AircraftStatus): Promise<TelexConnection>;
    static disconnect(): Promise<void>;
    static sendMessage(recipientFlight: string, message: string): Promise<TelexMessage>;
    static fetchMessages(): Promise<TelexMessage[]>;
    static fetchConnections(skip?: number, take?: number, bounds?: Bounds): Promise<Paginated<TelexConnection>>;
    static fetchAllConnections(bounds?: Bounds, stageCallback?: StageCallback): Promise<TelexConnection[]>;
    static fetchConnection(id: string): Promise<TelexConnection>;
    static findConnections(flightNumber: string): Promise<TelexConnection[]>;
    static countConnections(): Promise<number>;
    private static buildBody;
    private static buildToken;
    private static connectionOrThrow;
    private static mapConnection;
    private static mapMessage;
}
export declare class Airport {
    static get(icao: string): Promise<AirportResponse>;
    static getBatch(icaos: string[]): Promise<AirportResponse[]>;
}
export declare class GitVersions {
    static getNewestCommit(user: string, repo: string, branch: string): Promise<CommitInfo>;
    static getReleases(user: string, repo: string): Promise<ReleaseInfo[]>;
}
