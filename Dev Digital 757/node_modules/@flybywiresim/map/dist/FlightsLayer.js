import React, { useState } from "react";
import { FeatureGroup, useMapEvents } from "react-leaflet";
import { Telex } from "@flybywiresim/api-client";
import AirportsLayer from "./AirportsLayer";
import FlightMarker from "./FlightMarker";
import useInterval from "./hooks/useInterval";

const FlightsLayer = props => {
  const map = useMapEvents({
    moveend: event => {
      const newBounds = event.target.getBounds();

      if (!bounds.contains(newBounds)) {
        setBounds(newBounds);
      }
    }
  });
  const [isUpdating, setIsUpdating] = useState(false);
  const [data, setData] = useState([]);
  const [bounds, setBounds] = useState(map.getBounds());
  const [selectedConnection, setSelectedConnection] = useState(null);
  useInterval(async () => {
    await getLocationData(false, map.getBounds());
  }, props.refreshInterval || 10000, {
    runOnStart: true,
    additionalDeps: [props.hideOthers, bounds]
  });

  async function getLocationData(staged = false, bounds) {
    setIsUpdating(true);
    let apiBounds = {
      north: 90,
      east: 180,
      south: -90,
      west: 0
    };

    if (bounds) {
      apiBounds = {
        north: Math.ceil(Math.min(bounds.getNorth(), 90)),
        east: Math.ceil(Math.min(bounds.getEast(), 180)),
        south: Math.floor(Math.max(bounds.getSouth(), -90)),
        west: Math.floor(Math.max(bounds.getWest(), -180))
      };
    }

    let flights = [];

    try {
      if (props.hideOthers) {
        const flt = await Telex.findConnections(props.currentFlight);

        if (flt.length !== 1 && flt[0].flight !== props.currentFlight) {
          console.error("Current FLT NBR returns more than 1 result");
          return;
        }

        flights.push(flt[0]);
        map.flyTo({
          lat: flt[0].location.y,
          lng: flt[0].location.x
        });
      } else {
        flights = await Telex.fetchAllConnections(apiBounds, staged ? setData : undefined);
      }
    } catch (e) {
      console.error(e);
    }

    setIsUpdating(false);
    setData(flights);

    if (props.onConnectionsUpdate) {
      props.onConnectionsUpdate(flights);
    }
  }

  return /*#__PURE__*/React.createElement(FeatureGroup, null, data.map(connection => /*#__PURE__*/React.createElement(FlightMarker, {
    key: connection.id,
    connection: connection,
    icon: props.planeIcon,
    highlightIcon: props.planeIconHighlight,
    isHighlighted: props.searchedFlight && props.searchedFlight.flight === connection.flight || props.currentFlight === connection.flight,
    onPopupOpen: () => setSelectedConnection(connection),
    onPopupClose: () => setSelectedConnection(null)
  })), selectedConnection !== null ? /*#__PURE__*/React.createElement(AirportsLayer, {
    connection: selectedConnection,
    departureIcon: props.departureIcon,
    arrivalIcon: props.arrivalIcon
  }) : "");
};

export default FlightsLayer;