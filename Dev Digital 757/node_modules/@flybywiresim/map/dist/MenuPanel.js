import React, { useState, useEffect } from "react";
import { Telex } from "@flybywiresim/api-client";
import { useMap } from "react-leaflet";
import L, { LatLng } from "leaflet";
import useInterval from "./hooks/useInterval";

const MenuPanel = props => {
  const mapRef = useMap();
  const [showDetails, setShowDetails] = useState(false);
  const [totalFlights, setTotalFlights] = useState(NaN);
  const [searchValue, setSearchValue] = useState("");
  const [autocompleteList, setAutocompleteList] = useState([]);
  useInterval(async () => {
    try {
      setTotalFlights(await Telex.countConnections());
    } catch (e) {
      console.error(e);
    }
  }, props.refreshInterval || 10000, {
    runOnStart: true
  }); // Prevent click through

  useEffect(() => {
    const menu = L.DomUtil.get('menu-panel');

    if (menu) {
      L.DomEvent.disableClickPropagation(menu);
    }
  }, [mapRef]);

  async function handleSearch(flyTo, searchOverride) {
    const search = searchOverride || searchValue;

    if (!search) {
      if (props.onReset) {
        props.onReset();
      }

      return;
    }

    try {
      const res = await Telex.findConnections(search);

      if (res.length === 0) {
        if (props.onNotFound) {
          props.onNotFound();
        }
      } else if (res.length >= 1) {
        setAutocompleteList(res.sort((a, b) => {
          if (a.flight < b.flight) {
            return -1;
          }

          if (a.flight > b.flight) {
            return 1;
          }

          return 0;
        }));

        if (res[0].flight === search) {
          if (props.onFound) {
            props.onFound(res[0]);
          }

          if (flyTo === undefined || flyTo || res.length === 1) {
            const zoom = Math.max(10, 15 - res[0].trueAltitude * 5 / 12000);
            mapRef.flyTo(new LatLng(res[0].location.y, res[0].location.x), zoom);
          }
        }
      }
    } catch (e) {
      console.error(e);

      if (props.onNotFound) {
        props.onNotFound();
      }
    }
  }

  function handleTileSelect(event) {
    if (props.onTileSetChange && props.availableTileSets) {
      props.onTileSetChange( // @ts-ignore
      props.availableTileSets.find(x => x.value === event.target.value) || props.availableTileSets[0]);
    }
  }

  return /*#__PURE__*/React.createElement("div", {
    id: "menu-panel",
    className: "leaflet-top leaflet-left"
  }, /*#__PURE__*/React.createElement("div", {
    className: "search-bar"
  }, /*#__PURE__*/React.createElement("button", {
    className: "menu-button",
    "aria-label": "Menu",
    onClick: () => setShowDetails(!showDetails)
  }, /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    strokeWidth: "2",
    stroke: "#b5b5b5",
    fill: "none",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }, /*#__PURE__*/React.createElement("line", {
    x1: "4",
    y1: "6",
    x2: "20",
    y2: "6"
  }), /*#__PURE__*/React.createElement("line", {
    x1: "4",
    y1: "12",
    x2: "20",
    y2: "12"
  }), /*#__PURE__*/React.createElement("line", {
    x1: "4",
    y1: "18",
    x2: "20",
    y2: "18"
  }))), /*#__PURE__*/React.createElement("input", {
    type: "text",
    "aria-label": "Search Field",
    className: "search-term",
    list: "autocomplete",
    placeholder: "Flight Number",
    onChange: event => {
      setSearchValue(event.target.value.toString());
      handleSearch(false, event.target.value.toString());
    },
    onKeyPress: event => event.key === "Enter" ? handleSearch() : {},
    onFocus: event => event.target.select(),
    onBlur: () => handleSearch()
  }), /*#__PURE__*/React.createElement("button", {
    type: "submit",
    "aria-label": "Search",
    onClick: () => handleSearch(),
    className: "search-button"
  }, /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    strokeWidth: "3",
    stroke: "#fff",
    fill: "none",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }, /*#__PURE__*/React.createElement("path", {
    stroke: "none",
    d: "M0 0h24v24H0z",
    fill: "none"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "10",
    cy: "10",
    r: "7"
  }), /*#__PURE__*/React.createElement("line", {
    x1: "21",
    y1: "21",
    x2: "15",
    y2: "15"
  }))), /*#__PURE__*/React.createElement("datalist", {
    id: "autocomplete"
  }, autocompleteList.map(connection => !searchValue || connection.flight.startsWith(searchValue) ? /*#__PURE__*/React.createElement("option", {
    key: connection.id,
    value: connection.flight
  }) : /*#__PURE__*/React.createElement(React.Fragment, null)))), /*#__PURE__*/React.createElement("div", {
    className: "divider",
    hidden: !showDetails
  }), /*#__PURE__*/React.createElement("div", {
    className: "detail-area",
    hidden: !showDetails
  }, props.weatherOpacity !== undefined && props.onWeatherOpacityChange ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("p", null, "Weather opacity"), /*#__PURE__*/React.createElement("input", {
    type: "range",
    value: 100 * props.weatherOpacity,
    min: 0,
    max: 100,
    onChange: event => props.onWeatherOpacityChange && props.onWeatherOpacityChange(Number(event.target.value) / 100)
  })) : /*#__PURE__*/React.createElement(React.Fragment, null), props.activeTileSet && props.availableTileSets && props.onTileSetChange ? /*#__PURE__*/React.createElement("div", {
    onChange: handleTileSelect
  }, props.availableTileSets.map(tileSet => /*#__PURE__*/React.createElement("label", {
    className: "tileset-select",
    key: tileSet.value
  }, /*#__PURE__*/React.createElement("input", {
    type: "radio",
    name: "tileset",
    value: tileSet.value,
    defaultChecked: props.activeTileSet && tileSet.value === props.activeTileSet.value
  }), /*#__PURE__*/React.createElement("img", {
    src: tileSet.previewImageUrl,
    alt: tileSet.name,
    width: "60rem"
  })))) : /*#__PURE__*/React.createElement(React.Fragment, null), props.onCurrentFlightChange ? /*#__PURE__*/React.createElement("input", {
    type: "text",
    placeholder: "Current Flight Number",
    onChange: event => props.onCurrentFlightChange ? props.onCurrentFlightChange(event.target.value.toString()) : {},
    onBlur: event => props.onCurrentFlightChange ? props.onCurrentFlightChange(event.target.value.toString()) : {},
    onFocus: event => event.target.select(),
    value: props.currentFlight
  }) : /*#__PURE__*/React.createElement(React.Fragment, null), props.onShowOthersChange ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("p", null, "Show others"), /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    checked: props.showOthers,
    onChange: event => props.onShowOthersChange ? props.onShowOthersChange(event.target.checked) : {}
  })) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement("p", {
    className: "active-flights"
  }, "Active Flights", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("span", null, totalFlights.toString()))));
};

export default MenuPanel;