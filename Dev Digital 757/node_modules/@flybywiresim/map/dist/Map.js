import React, { useState } from "react";
import { TileLayer, MapContainer, ZoomControl } from "react-leaflet";
import { NmScale } from '@marfle/react-leaflet-nmscale';
import WeatherLayer from "./WeatherLayer";
import FlightsLayer from './FlightsLayer';
import MenuPanel from './MenuPanel';
import "leaflet/dist/leaflet.css";
import "./Map.scss";
import ArrivalWhite from './res/icons/arrival_white.png';
import ArrivalGray from './res/icons/arrival_gray.png';
import DepartureWhite from './res/icons/departure_white.png';
import DepartureGray from './res/icons/departure_gray.png';
import PlaneCyan from './res/icons/plane_cyan.png';
import PlaneBlue from './res/icons/plane_blue.png';
import CartoDarkPreview from './res/previews/carto-dark.png';
import CartoLightPreview from './res/previews/carto-light.png';
import OsmPreview from './res/previews/osm.png';
import { MeasureControl } from "./MeasureControl";
import useLocalStorage from "./hooks/useLocalStorage";

const Map = props => {
  const availableTileSets = [{
    id: 1,
    value: "carto-dark",
    name: "Dark",
    attribution: "&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>",
    url: "https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png",
    planeIcon: PlaneCyan,
    planeIconHighlight: PlaneBlue,
    departureIcon: DepartureWhite,
    arrivalIcon: ArrivalWhite,
    previewImageUrl: CartoDarkPreview
  }, {
    id: 2,
    value: "carto-light",
    name: "Light",
    attribution: "&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>",
    url: "https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png",
    planeIcon: PlaneCyan,
    planeIconHighlight: PlaneBlue,
    departureIcon: DepartureGray,
    arrivalIcon: ArrivalGray,
    previewImageUrl: CartoLightPreview
  }, {
    id: 3,
    value: "osm",
    name: "Open Street Map",
    attribution: "&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors",
    url: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
    planeIcon: PlaneCyan,
    planeIconHighlight: PlaneBlue,
    departureIcon: DepartureGray,
    arrivalIcon: ArrivalGray,
    previewImageUrl: OsmPreview
  }];
  const [currentFlight, setCurrentFlight] = useState(props.currentFlight || "");
  const [selectedTile, setSelectedTile] = useLocalStorage("tileSet", availableTileSets[0], {
    valueOverride: !!props.forceTileset && availableTileSets.find(x => x.value === props.forceTileset)
  });
  const [searchedFlight, setSearchedFlight] = useState();
  const [weatherOpacity, setWeatherOpacity] = useState(props.weatherOpacity || 0.2);
  const [showOthers, setShowOthers] = useState(!props.hideOthers);
  return /*#__PURE__*/React.createElement(MapContainer, {
    id: "live-map",
    center: props.center || [50, 8],
    zoom: props.zoom || 5,
    scrollWheelZoom: !props.disableScroll,
    worldCopyJump: true,
    zoomControl: false
  }, /*#__PURE__*/React.createElement(TileLayer, {
    zIndex: 0,
    attribution: selectedTile.attribution,
    url: selectedTile.url,
    key: selectedTile.value
  }), !props.disableWeather ? /*#__PURE__*/React.createElement(WeatherLayer, {
    opacity: weatherOpacity
  }) : /*#__PURE__*/React.createElement(React.Fragment, null), !props.disableFlights ? /*#__PURE__*/React.createElement(FlightsLayer, {
    planeIcon: selectedTile.planeIcon,
    planeIconHighlight: selectedTile.planeIconHighlight,
    departureIcon: selectedTile.departureIcon,
    arrivalIcon: selectedTile.arrivalIcon,
    currentFlight: currentFlight,
    searchedFlight: searchedFlight,
    refreshInterval: props.refreshInterval || 10000,
    hideOthers: !showOthers
  }) : /*#__PURE__*/React.createElement(React.Fragment, null), !props.disableMenu ? /*#__PURE__*/React.createElement(MenuPanel, {
    onFound: conn => setSearchedFlight(conn),
    onNotFound: () => setSearchedFlight(undefined),
    onReset: () => setSearchedFlight(undefined),
    weatherOpacity: weatherOpacity,
    onWeatherOpacityChange: setWeatherOpacity,
    activeTileSet: selectedTile,
    availableTileSets: availableTileSets,
    onTileSetChange: setSelectedTile,
    refreshInterval: props.refreshInterval || 10000,
    currentFlight: currentFlight,
    onCurrentFlightChange: setCurrentFlight,
    showOthers: showOthers,
    onShowOthersChange: setShowOthers
  }) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(ZoomControl, {
    position: props.zoomPosition || "bottomright"
  }), /*#__PURE__*/React.createElement(NmScale, null), /*#__PURE__*/React.createElement(MeasureControl, {
    position: props.zoomPosition || "bottomright",
    unit: "nauticalmiles",
    showBearings: true,
    showUnitControl: true,
    showClearControl: true,
    tempLine: {
      color: '#00C2CB',
      weight: 2
    },
    fixedLine: {
      color: '#00C2CB',
      weight: 2
    }
  }));
};

export default Map;