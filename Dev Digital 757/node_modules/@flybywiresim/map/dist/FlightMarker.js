import { Marker, Popup } from "react-leaflet";
import L from "leaflet";
import React, { useEffect, useState } from "react";
import { Telex } from "@flybywiresim/api-client";
import useInterval from "./hooks/useInterval";

const FlightMarker = props => {
  const [connection, setConnection] = useState({
    aircraftType: "",
    id: "",
    isActive: false,
    firstContact: new Date(),
    lastContact: new Date(),
    freetextEnabled: false,
    destination: "",
    origin: "",
    heading: 0,
    trueAltitude: 0,
    flight: "",
    location: {
      x: 0,
      y: 0
    }
  });
  useEffect(() => {
    if (typeof props.connection == "undefined") {
      return;
    } else if (typeof props.connection === "string") {
      findAndSetConnection(props.connection);
    } else {
      setConnection(props.connection);
    }

    if (props.autoUpdate) {
      useInterval(async () => {
        if (props.autoUpdate && props.connection !== undefined) {
          await findAndSetConnection(props.connection);
        }
      }, 15000, {
        runOnStart: true,
        additionalDeps: [props.autoUpdate]
      });
    }
  }, [props.connection]);

  async function findAndSetConnection(connection) {
    if (typeof connection === "undefined") {
      return;
    }

    try {
      if (typeof connection === "string") {
        const conns = await Telex.findConnections(connection);

        if (conns.length !== 1 && conns[0].flight !== connection) {
          console.error('Current FLT NBR did not return 1 result');
          return;
        }

        setConnection(conns[0]);
      } else {
        setConnection(await Telex.fetchConnection(connection.id));
      }
    } catch (e) {
      console.error(e);
    }
  }

  return /*#__PURE__*/React.createElement(Marker, {
    position: [connection.location.y, connection.location.x] // TODO: Need to get rid of L.divIcon. It produces twice as many DOM nodes as L.icon. Issue is the rotation.
    ,
    icon: L.divIcon({
      iconSize: [25, 27],
      iconAnchor: [12.5, 13.5],
      className: 'aircraft-marker',
      html: `<img alt="${connection.flight}" 
                        src="${props.isHighlighted && !!props.highlightIcon ? props.highlightIcon : props.icon}"
                        style="transform-origin: center; transform: rotate(${connection.heading}deg);"
                        width="25" height="27"
                        />`
    })
  }, /*#__PURE__*/React.createElement(Popup, {
    closeButton: false,
    className: "aircraft-popup",
    onOpen: () => props.onPopupOpen ? props.onPopupOpen() : {},
    onClose: () => props.onPopupClose ? props.onPopupClose() : {}
  }, /*#__PURE__*/React.createElement("h1", null, "Flight ", connection.flight), connection.origin && connection.destination ? /*#__PURE__*/React.createElement("h2", null, connection.origin, /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "18",
    height: "18",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M16 10h4a2 2 0 0 1 0 4h-4l-4 7h-3l2 -7h-4l-2 2h-3l2 -4l-2 -4h3l2 2h4l-2 -7h3z"
  })), " ", connection.destination) : "", /*#__PURE__*/React.createElement("p", null, "Aircraft: ", connection.aircraftType), /*#__PURE__*/React.createElement("p", null, "Altitude: ", connection.trueAltitude, "ft")));
};

export default FlightMarker;