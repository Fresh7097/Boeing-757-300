"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitVersions = exports.Airport = exports.Telex = exports.Taf = exports.Atis = exports.Metar = exports.NXApi = exports.TelexNotConnectedError = exports.HttpError = void 0;
var HttpError = /** @class */ (function (_super) {
    __extends(HttpError, _super);
    function HttpError(status, message) {
        var _this = _super.call(this, message) || this;
        _this.status = status;
        return _this;
    }
    return HttpError;
}(Error));
exports.HttpError = HttpError;
var TelexNotConnectedError = /** @class */ (function (_super) {
    __extends(TelexNotConnectedError, _super);
    function TelexNotConnectedError() {
        return _super.call(this, "TELEX is not connected") || this;
    }
    return TelexNotConnectedError;
}(Error));
exports.TelexNotConnectedError = TelexNotConnectedError;
var NXApi = /** @class */ (function () {
    function NXApi() {
    }
    NXApi.url = new URL("https://api.flybywiresim.com");
    return NXApi;
}());
exports.NXApi = NXApi;
var Metar = /** @class */ (function () {
    function Metar() {
    }
    Metar.get = function (icao, source) {
        if (!icao) {
            throw new Error("No ICAO provided");
        }
        var url = new URL("/metar/" + icao, NXApi.url);
        if (source) {
            url.searchParams.set("source", source);
        }
        return fetch(url.href)
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    return Metar;
}());
exports.Metar = Metar;
var Atis = /** @class */ (function () {
    function Atis() {
    }
    Atis.get = function (icao, source) {
        if (!icao) {
            throw new Error("No ICAO provided");
        }
        var url = new URL("/atis/" + icao, NXApi.url);
        if (source) {
            url.searchParams.set("source", source);
        }
        return fetch(url.href)
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    return Atis;
}());
exports.Atis = Atis;
var Taf = /** @class */ (function () {
    function Taf() {
    }
    Taf.get = function (icao, source) {
        if (!icao) {
            throw new Error("No ICAO provided");
        }
        var url = new URL("/taf/" + icao, NXApi.url);
        if (source) {
            url.searchParams.set("source", source);
        }
        return fetch(url.href)
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    return Taf;
}());
exports.Taf = Taf;
var Telex = /** @class */ (function () {
    function Telex() {
    }
    Telex.connect = function (status) {
        var connectBody = Telex.buildBody(status);
        var headers = {
            "Content-Type": "application/json"
        };
        var url = new URL("/txcxn", NXApi.url);
        return fetch(url.href, { method: "POST", body: JSON.stringify(connectBody), headers: headers })
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json()
                .then(function (data) {
                Telex.accessToken = data.accessToken;
                return data;
            });
        });
    };
    Telex.update = function (status) {
        Telex.connectionOrThrow();
        var connectBody = Telex.buildBody(status);
        var headers = {
            "Content-Type": "application/json",
            Authorization: Telex.buildToken()
        };
        var url = new URL("/txcxn", NXApi.url);
        return fetch(url.href, { method: "PUT", body: JSON.stringify(connectBody), headers: headers })
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    Telex.disconnect = function () {
        Telex.connectionOrThrow();
        var headers = {
            Authorization: Telex.buildToken()
        };
        var url = new URL("/txcxn", NXApi.url);
        return fetch(url.href, { method: "DELETE", headers: headers })
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            Telex.accessToken = "";
        });
    };
    Telex.sendMessage = function (recipientFlight, message) {
        Telex.connectionOrThrow();
        var body = {
            to: recipientFlight,
            message: message,
        };
        var headers = {
            "Content-Type": "application/json",
            Authorization: Telex.buildToken()
        };
        var url = new URL("/txmsg", NXApi.url);
        return fetch(url.href, { method: "POST", body: JSON.stringify(body), headers: headers })
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    Telex.fetchMessages = function () {
        Telex.connectionOrThrow();
        var headers = {
            Authorization: Telex.buildToken()
        };
        var url = new URL("/txmsg", NXApi.url);
        return fetch(url.href, { method: "GET", headers: headers })
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    Telex.fetchConnections = function (skip, take, bounds) {
        var url = new URL("/txcxn", NXApi.url);
        if (skip) {
            url.searchParams.set("skip", skip.toString());
        }
        if (take) {
            url.searchParams.append("take", take.toString());
        }
        if (bounds) {
            url.searchParams.append("north", bounds.north.toString());
            url.searchParams.append("east", bounds.east.toString());
            url.searchParams.append("south", bounds.south.toString());
            url.searchParams.append("west", bounds.west.toString());
        }
        return fetch(url.href, { method: "GET" })
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    Telex.fetchAllConnections = function (bounds, stageCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var flights, skip, total, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        flights = [];
                        skip = 0;
                        total = 0;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, Telex.fetchConnections(skip, 100, bounds)];
                    case 2:
                        data = _a.sent();
                        total = data.total;
                        skip += data.count;
                        flights = flights.concat(data.results);
                        if (stageCallback) {
                            stageCallback(flights);
                        }
                        _a.label = 3;
                    case 3:
                        if (total > skip) return [3 /*break*/, 1];
                        _a.label = 4;
                    case 4: return [2 /*return*/, flights];
                }
            });
        });
    };
    Telex.fetchConnection = function (id) {
        var url = new URL("/txcxn/" + id, NXApi.url);
        return fetch(url.href, { method: "GET" })
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    Telex.findConnections = function (flightNumber) {
        var url = new URL("/txcxn/_find", NXApi.url);
        url.searchParams.set("flight", flightNumber);
        return fetch(url.href, { method: "GET" })
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    Telex.countConnections = function () {
        var url = new URL("/txcxn/_count", NXApi.url);
        return fetch(url.href, { method: "GET" })
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    Telex.buildBody = function (status) {
        return {
            location: {
                x: status.location.long,
                y: status.location.lat,
            },
            trueAltitude: status.trueAltitude,
            heading: status.heading,
            origin: status.origin,
            destination: status.destination,
            freetextEnabled: status.freetextEnabled,
            flight: status.flight,
            aircraftType: status.aircraftType,
        };
    };
    Telex.buildToken = function () {
        return "Bearer " + Telex.accessToken;
    };
    Telex.connectionOrThrow = function () {
        if (!Telex.accessToken) {
            throw new TelexNotConnectedError();
        }
    };
    Telex.refreshRate = 15000;
    return Telex;
}());
exports.Telex = Telex;
var Airport = /** @class */ (function () {
    function Airport() {
    }
    Airport.get = function (icao) {
        if (!icao) {
            throw new Error("No ICAO provided");
        }
        var url = new URL("/api/v1/airport/" + icao, NXApi.url);
        return fetch(url.href)
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    return Airport;
}());
exports.Airport = Airport;
var GitVersions = /** @class */ (function () {
    function GitVersions() {
    }
    GitVersions.getNewestCommit = function (user, repo, branch) {
        if (!user || !repo || !branch) {
            throw new Error("Missing argument");
        }
        var url = new URL("/api/v1/git-versions/" + user + "/" + repo + "/branches/" + branch, NXApi.url);
        return fetch(url.href)
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    GitVersions.getReleases = function (user, repo) {
        if (!user || !repo) {
            throw new Error("Missing argument");
        }
        var url = new URL("/api/v1/git-versions/" + user + "/" + repo + "/releases", NXApi.url);
        return fetch(url.href)
            .then(function (response) {
            if (!response.ok) {
                throw new HttpError(response.status);
            }
            return response.json();
        });
    };
    return GitVersions;
}());
exports.GitVersions = GitVersions;
